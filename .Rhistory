hexgrid@data <- mutate(hexgrid@data, id_grid = as.numeric(rownames(hexgrid@data)))
settlements@data <- mutate(settlements@data, id_sett = as.numeric(rownames(settlements@data)))
# The settlements get the value of the grids they are on top of
setgrids <- over(settlements, hexgrid)
# # The order didn't change so re add id_sett to the new table
setgrids <- mutate(setgrids, id_sett = as.numeric(rownames(setgrids)))
# Join each original settlement to its grid location
setgrids <- left_join(settlements@data, setgrids, by = c("id_sett" = "id_sett"))
db$com_loc <- clean_pcode(paste(db$admin3,db$info_localite_final, sep = "_"))
db$dep_com <- clean_pcode(paste(db$admin2,db$admin3, sep = "_"))
db$com_loc <- clean_pcode(paste(db$admin3,db$info_localite_final, sep = "_"))
Assessed<-db
# The join is possible between previously agregated data and whole settlement database
Assessed <-left_join(Assessed,setgrids, by = "com_loc")
# Make sure there are no duplicates in the unique column
Assessed <- distinct(Assessed,com_loc, .keep_all= TRUE)
# No Null values allowed
Assessed <- Assessed %>% filter(!is.na(com_loc))
# Check how many settlements and KIs we have per  grid
grid_summary <- Assessed %>% group_by(State_Id) %>%
summarise(settlement_assessed_num = length(dep_com), ki_num= sum(B_ki_coverage))
Assessed$dep_com.x
Assessed$dep_com.y
# Check how many settlements and KIs we have per  grid
grid_summary <- Assessed %>% group_by(State_Id) %>%
summarise(settlement_assessed_num = length(dep_com.x), ki_num= sum(B_ki_coverage))
hex <- c("State_Id","id_grid",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
Assessed_fields <- Assessed %>%
select(all_of(hex))
#Proportion of assessed settlements with IDPs and refugies who have arrived within the last month
Assessed_fields$idp_refugie_last_month<-ifelse(Assessed_fields$pdi_temps_arrivee == "1_mois" |
Assessed_fields$refugies_temps_arrivee == "1_mois",1,0)
#Proportion of assessed settlements with IDPs and refugies who have arrived within the last 3 months
Assessed_fields$idp_refugie_3_months<-ifelse(Assessed_fields$pdi_temps_arrivee == "1_mois" |
Assessed_fields$pdi_temps_arrivee == "3_mois" |
Assessed_fields$refugies_temps_arrivee == "1_mois" |
Assessed_fields$refugies_temps_arrivee == "3_mois",1,0)
#Proportion of assessed settlements reporting lack of access to food
Assessed_fields$food_access_no<-ifelse(Assessed_fields$nourriture_maintenant == "non",1,0)
#Proportion of assessed settlements reporting lack of access to their usual mean of existence
Assessed_fields$mean_existence_access_no<-ifelse(Assessed_fields$moyens_existence_obstacle == "non",1,0)
#Proportion of assessed settlements reporting to have access to a market
Assessed_fields$market_access<-ifelse(Assessed_fields$marche_maintenant == "oui",1,0)
#Proportion of assessed settlements reporting to have felt unsafe
Assessed_fields$security_feeling_no<-ifelse(Assessed_fields$prot_maintenant == "non",1,0)
#Proportion of assessed settlements reporting to have no access to health facilities
Assessed_fields$health_access_no<-ifelse(Assessed_fields$sante_maintenant == "non",1,0)
#Proportion of assessed settlements reporting to have no access to education
Assessed_fields$education_access_no<-ifelse(Assessed_fields$edu_maintenant == "non",1,0)
#Proportion of assessed settlements reporting to have lack of access to information
Assessed_fields$diff_info_access<-ifelse(Assessed_fields$info_difficulte == "oui",1,0)
#Proportion of assessed settlements reporting to have no lack of access to information
Assessed_fields$diff_info_access_no<-ifelse(Assessed_fields$info_difficulte == "non",1,0)
#Proportion of assessed settlements reporting to have no access to enough water
Assessed_fields$enough_water_access_no<-ifelse(Assessed_fields$eau_debit == "non",1,0)
#Proportion of assessed settlements pdi_vivant_cond_adeq_no
Assessed_fields$pdi_vivant_cond_adeq_no<-ifelse(Assessed_fields$pdi_abris_adequat == "non",1,0)
#Proportion of assessed settlements reporting to have des PDI
Assessed_fields$pdi_vivant_cond_adeq_noSL<-ifelse(Assessed_fields$pdi_abris_adequat == "oui" |
Assessed_fields$pdi_abris_adequat == "non" |
Assessed_fields$pdi_abris_adequat == "NC" |
Assessed_fields$pdi_abris_adequat == "nsp",1,0)
#Proportion of assessed settlements reporting to have destruction d'abris
Assessed_fields$abris_dommages<-ifelse(Assessed_fields$abris_dommages == "oui",1,0)
#Proportion of assessed settlements reporting to have programmes nutritionnels
Assessed_fields$nutri_programme<-ifelse(Assessed_fields$nutri =="oui",1,0)
#Proportion of assessed settlements reporting to have access to savon
Assessed_fields$procuration_savon<-ifelse(Assessed_fields$procuration_savon == "oui",1,0)
#Proportion of assessed settlements reporting to have access to tel mobile
Assessed_fields$tel_mobile<-ifelse(Assessed_fields$reseau_mobile == "oui",1,0)
## Aggregation
SelAgrege <- c(admin,"idp_refugie_last_month","idp_refugie_3_months", "food_access_no", "mean_existence_access_no", "market_access",
"security_feeling_no","health_access_no", "education_access_no", "diff_info_access", "diff_info_access_no", "nutri_programme",
"enough_water_access_no", "pdi_vivant_cond_adeq_no", "pdi_vivant_cond_adeq_noSL", "abris_dommages",
"procuration_savon", "tel_mobile")
## Aggregation
SelAgrege <- c("State_Id","id_grid","idp_refugie_last_month","idp_refugie_3_months", "food_access_no", "mean_existence_access_no", "market_access",
"security_feeling_no","health_access_no", "education_access_no", "diff_info_access", "diff_info_access_no", "nutri_programme",
"enough_water_access_no", "pdi_vivant_cond_adeq_no", "pdi_vivant_cond_adeq_noSL", "abris_dommages",
"procuration_savon", "tel_mobile")
Result_aggregated <- Assessed_fields %>%
select(all_of(SelAgrege))%>%
group_by_at(admin)%>%
summarise_all(list(~mean(.,na.rm = T)))
Result_aggregated <- Assessed_fields %>%
select(all_of(SelAgrege))%>%
group_by_at(c("State_Id","id_grid"))%>%
summarise_all(list(~mean(.,na.rm = T)))
final_hex <-left_join(Result_aggregated, grid_summary, by = "State_Id")
pdi_noSL <- final_hex$settlement_assessed_num*final_hex$pdi_vivant_cond_adeq_noSL
pdi_no <- final_hex$settlement_assessed_num*final_hex$pdi_vivant_cond_adeq_no
final_hex$pdi_vivant_cond_adeq_no <- pdi_no/pdi_noSL
final_hex$pdi_vivant_cond_adeq_noSL <- NULL
final_hex <- subset(final_hex,!is.na(final_hex$State_Id))
View(final_hex)
write_xlsx(
final_hex,
paste0("output/fev2021/Hex_Agg_REG_1903B_3F_data_compilation-",humanTime(),".xlsx"))
rm(list = ls())
source("R/REACH_3F_Calcul_Aggregation.R")
db<-read_excel("data/fev2021/Agg_REG_1903B_3F-20210331-153932_XML.xlsx") %>% type_convert()
LocaliteGPK <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\Localites\\Localites_3F.gpkg"
LocaliteLayer <- "Localites_3F"
hexagoneSHP <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\HEX\\hexagon2.shp"
hexgrid <- readOGR(hexagoneSHP)
settlements<-st_read(LocaliteGPK, layer = LocaliteLayer) %>% as.data.frame()
settlements_hex <- readOGR(LocaliteGPK, layer = LocaliteLayer)
hexgrid@data <- mutate(hexgrid@data, id_grid = as.numeric(rownames(hexgrid@data)))
settlements_hex@data <- mutate(settlements_hex@data, id_sett = as.numeric(rownames(settlements_hex@data)))
setgrids <- over(settlements_hex, hexgrid)
setgrids <- mutate(setgrids, id_sett = as.numeric(rownames(setgrids)))
setgrids <- left_join(settlements_hex@data, setgrids, by = c("id_sett" = "id_sett"))
setgrids$com_loc<-clean_pcode(setgrids$com_loc)
setgrids$dep_com<-clean_pcode(setgrids$dep_com)
db$pay_reg <- clean_pcode(paste(db$info_pays,db$admin1, sep = "_"))
db$reg_dep <- clean_pcode(paste(db$admin1,db$admin2, sep = "_"))
db$dep_com <- clean_pcode(paste(db$admin2,db$admin3, sep = "_"))
db$com_loc <- clean_pcode(paste(db$admin3,db$info_localite_final, sep = "_"))
settlement_dep_num<-settlements %>% count(clean_pcode(reg_dep)) %>% rename("reg_dep"="clean_pcode(reg_dep)")
settlement_com_num <- settlements %>% count(clean_pcode(dep_com)) %>% rename("dep_com"="clean_pcode(dep_com)")
hex <- c("State_Id","id_grid",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
final_hex<-aggregation_fct_hex(db,setgrids,hex,c("State_Id","id_grid"))
final_hex<-aggregation_fct_xml_hex(db,setgrids,hex,c("State_Id","id_grid"))
View(final_hex)
hexgrid <- st_read(hexagoneSHP)
Settlements <- st_read(LocaliteGPK, layer = LocaliteLayer)
# Jointure entre la db et les localit?s
SettlementsDB <- Settlements [ Settlements$dep_com_loc %in% db$dep_com_loc ,]
# Jointure entre les localit?s avec des donn?es et les hexagones
SettJoinHex <- st_join(SettlementsDB, hexgrid["State_Id"])
Assessed<-read_excel("data/fev2021/Agg_REG_1903B_3F-20210331-153932_XML.xlsx") %>% type_convert()
db$dep_com <- clean_pcode(paste(db$admin2,db$admin3, sep = "_"))
db$com_loc <- clean_pcode(paste(db$admin3,db$info_localite_final, sep = "_"))
Assessed <-left_join(SettJoinHex,setgrids, by = "com_loc")
# Make sure there are no duplicates in the unique column
Assessed <- distinct(Assessed,com_loc, .keep_all= TRUE)
# No Null values allowed
Assessed <- Assessed %>% filter(!is.na(com_loc))
# Check how many settlements and KIs we have per  grid
grid_summary <- Assessed %>% group_by(State_Id) %>%
summarise(settlement_assessed_num = length(dep_com), ki_num= sum(B_ki_coverage))
Assessed$State_Id.x
Assessed$State_Id.y
Assessed$State_Id.x
Assessed$State_Id.y
# Check how many settlements and KIs we have per  grid
grid_summary <- Assessed %>% group_by(State_Id.x) %>%
summarise(settlement_assessed_num = length(dep_com), ki_num= sum(B_ki_coverage))
# Check how many settlements and KIs we have per  grid
grid_summary <- Assessed %>% group_by(State_Id.x) %>%
summarise(settlement_assessed_num = length(dep_com.x), ki_num= sum(B_ki_coverage))
library(dplyr)
library(tibble)
library(readxl)
library(sf)
library(rgdal)
library(readr)
library(writexl)
source("R/REACH_3F_Calcul_Aggregation.R")
db<-read_excel("data/mars2021/REG_1903B_Aggregated_Data_ 3F_2021-03_xml_VF.xlsx") %>% type_convert()
LocaliteGPK <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\Localites\\Localites_3F.gpkg"
LocaliteLayer <- "Localites_3F"
hexagoneSHP <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\HEX\\hexagon2.shp"
hexgrid <- readOGR(hexagoneSHP)
settlements<-st_read(LocaliteGPK, layer = LocaliteLayer) %>% as.data.frame()
db$pay_reg <- clean_pcode(paste(db$info_pays,db$admin1, sep = "_"))
db$reg_dep <- clean_pcode(paste(db$admin1,db$admin2, sep = "_"))
db$dep_com <- clean_pcode(paste(db$admin2,db$admin3, sep = "_"))
db$com_loc <- clean_pcode(paste(db$admin3,db$info_localite_final, sep = "_"))
settlement_dep_num<-settlements %>% count(clean_pcode(reg_dep)) %>% rename("reg_dep"="clean_pcode(reg_dep)")
settlement_com_num <- settlements %>% count(clean_pcode(dep_com)) %>% rename("dep_com"="clean_pcode(dep_com)")
pay_reg <- c("pay_reg",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
reg_dep <- c("reg_dep",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
dep_com <- c("dep_com",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
final_pay_reg<-aggregation_fct_xml(db,pay_reg,"pay_reg")
final_reg_dep<-aggregation_fct_xml(db,reg_dep,"reg_dep")
final_dep_com<-aggregation_fct_xml(db,dep_com,"dep_com")
final_reg_dep<-left_join(final_reg_dep,settlement_dep_num,"reg_dep")
final_reg_dep$dep_percentage <-final_reg_dep$settlement_assessed_num/final_reg_dep$n
final_dep_com<-left_join(final_dep_com,settlement_com_num,"dep_com")
final_dep_com$dep_percentage <-final_dep_com$settlement_assessed_num/final_dep_com$n
write_xlsx(
final_pay_reg,
paste0("output/mars2021/Reg_Agg_REG_1903B_3F_data_compilation-",humanTime(),".xlsx"))
write_xlsx(
final_reg_dep,
paste0("output/mars2021/Dep_Agg_REG_1903B_3F_data_compilation-",humanTime(),".xlsx"))
write_xlsx(
final_dep_com,
paste0("output/mars2021/Com_Agg_REG_1903B_3F_data_compilation-",humanTime(),".xlsx"))
hexgrid@data <- mutate(hexgrid@data, id_grid = as.numeric(rownames(hexgrid@data)))
settlements_hex@data <- mutate(settlements_hex@data, id_sett = as.numeric(rownames(settlements_hex@data)))
settlements_hex <- readOGR(LocaliteGPK, layer = LocaliteLayer)
settlements_hex@data <- mutate(settlements_hex@data, id_sett = as.numeric(rownames(settlements_hex@data)))
setgrids <- over(settlements_hex, hexgrid)
setgrids <- mutate(setgrids, id_sett = as.numeric(rownames(setgrids)))
setgrids <- left_join(settlements_hex@data, setgrids, by = c("id_sett" = "id_sett"))
View(setgrids)
setgrids$com_loc<-clean_pcode(setgrids$com_loc)
setgrids$dep_com<-clean_pcode(setgrids$dep_com)
db <-left_join(db,setgrids, by = "com_loc")
View(db)
db <- distinct(db,com_loc, .keep_all= TRUE)
db <- db %>% filter(!is.na(com_loc))
hex <- c("State_Id","id_grid",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
grid_summary <- db %>% group_by(State_Id) %>%
summarise(settlement_assessed_num = length(dep_com), ki_num= sum(B_ki_coverage))
View(grid_summary)
Assessed_fields <- db %>%
select(all_of(selection))
selection<-hex
Assessed_fields <- db %>%
select(all_of(selection))
#Proportion of assessed settlements with IDPs and refugies who have arrived within the last month
Assessed_fields$idp_refugie_last_month<-ifelse(Assessed_fields$pdi_temps_arrivee == "1_mois" |
Assessed_fields$refugies_temps_arrivee == "1_mois",1,0)
#Proportion of assessed settlements with IDPs and refugies who have arrived within the last 3 months
Assessed_fields$idp_refugie_3_months<-ifelse(Assessed_fields$pdi_temps_arrivee == "1_mois" |
Assessed_fields$pdi_temps_arrivee == "3_mois" |
Assessed_fields$refugies_temps_arrivee == "1_mois" |
Assessed_fields$refugies_temps_arrivee == "3_mois",1,0)
#Proportion of assessed settlements reporting lack of access to food
Assessed_fields$food_access_no<-ifelse(Assessed_fields$nourriture_maintenant == "non",1,0)
#Proportion of assessed settlements reporting lack of access to their usual mean of existence
Assessed_fields$mean_existence_access_no<-ifelse(Assessed_fields$moyens_existence_obstacle == "non",1,0)
#Proportion of assessed settlements reporting to have access to a market
Assessed_fields$market_access<-ifelse(Assessed_fields$marche_maintenant == "oui",1,0)
#Proportion of assessed settlements reporting to have felt unsafe
Assessed_fields$security_feeling_no<-ifelse(Assessed_fields$prot_maintenant == "non",1,0)
#Proportion of assessed settlements reporting to have no access to health facilities
Assessed_fields$health_access_no<-ifelse(Assessed_fields$sante_maintenant == "non",1,0)
#Proportion of assessed settlements reporting to have no access to education
Assessed_fields$education_access_no<-ifelse(Assessed_fields$edu_maintenant == "non",1,0)
#Proportion of assessed settlements reporting to have lack of access to information
Assessed_fields$diff_info_access<-ifelse(Assessed_fields$info_difficulte == "oui",1,0)
#Proportion of assessed settlements reporting to have no lack of access to information
Assessed_fields$diff_info_access_no<-ifelse(Assessed_fields$info_difficulte == "non",1,0)
#Proportion of assessed settlements reporting to have no access to enough water
Assessed_fields$enough_water_access_no<-ifelse(Assessed_fields$eau_debit == "non",1,0)
#Proportion of assessed settlements pdi_vivant_cond_adeq_no
Assessed_fields$pdi_vivant_cond_adeq_no<-ifelse(Assessed_fields$pdi_abris_adequat == "non",1,0)
#Proportion of assessed settlements reporting to have des PDI
Assessed_fields$pdi_vivant_cond_adeq_noSL<-ifelse(Assessed_fields$pdi_abris_adequat == "oui" |
Assessed_fields$pdi_abris_adequat == "non" |
Assessed_fields$pdi_abris_adequat == "NC" |
Assessed_fields$pdi_abris_adequat == "nsp",1,0)
#Proportion of assessed settlements reporting to have destruction d'abris
Assessed_fields$abris_dommages<-ifelse(Assessed_fields$abris_dommages == "oui",1,0)
#Proportion of assessed settlements reporting to have programmes nutritionnels
Assessed_fields$nutri_programme<-ifelse(Assessed_fields$nutri =="oui",1,0)
#Proportion of assessed settlements reporting to have access to savon
Assessed_fields$procuration_savon<-ifelse(Assessed_fields$procuration_savon == "oui",1,0)
#Proportion of assessed settlements reporting to have access to tel mobile
Assessed_fields$tel_mobile<-ifelse(Assessed_fields$reseau_mobile == "oui",1,0)
## Aggregation
SelAgrege <- c(admin,"idp_refugie_last_month","idp_refugie_3_months", "food_access_no", "mean_existence_access_no", "market_access",
"security_feeling_no","health_access_no", "education_access_no", "diff_info_access", "diff_info_access_no", "nutri_programme",
"enough_water_access_no", "pdi_vivant_cond_adeq_no", "pdi_vivant_cond_adeq_noSL", "abris_dommages",
"procuration_savon", "tel_mobile")
Result_aggregated <- Assessed_fields %>%
select(all_of(SelAgrege))%>%
group_by_at(admin)%>%
summarise_all(list(~mean(.,na.rm = T)))
rm(list = ls())
source("R/REACH_3F_Calcul_Aggregation.R")
db<-read_excel("data/mars2021/REG_1903B_Aggregated_Data_ 3F_2021-03_xml_VF.xlsx") %>% type_convert()
LocaliteGPK <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\Localites\\Localites_3F.gpkg"
LocaliteLayer <- "Localites_3F"
hexagoneSHP <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\HEX\\hexagon2.shp"
hexgrid <- readOGR(hexagoneSHP)
settlements_hex <- readOGR(LocaliteGPK, layer = LocaliteLayer)
hexgrid@data <- mutate(hexgrid@data, id_grid = as.numeric(rownames(hexgrid@data)))
settlements_hex@data <- mutate(settlements_hex@data, id_sett = as.numeric(rownames(settlements_hex@data)))
setgrids <- over(settlements_hex, hexgrid)
setgrids <- mutate(setgrids, id_sett = as.numeric(rownames(setgrids)))
setgrids <- left_join(settlements_hex@data, setgrids, by = c("id_sett" = "id_sett"))
setgrids$com_loc<-clean_pcode(setgrids$com_loc)
setgrids$dep_com<-clean_pcode(setgrids$dep_com)
db$dep_com <- clean_pcode(paste(db$admin2,db$admin3, sep = "_"))
db$com_loc <- clean_pcode(paste(db$admin3,db$info_localite_final, sep = "_"))
hex <- c("State_Id","id_grid",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
final_hex<-aggregation_fct_xml_hex(db,setgrids,hex,c("State_Id","id_grid"))
db <-left_join(db,setgrids, by = "com_loc")
# db$State_Id<- ifelse(is.na(db$dep_com%in%setgrids$dep_com),NA,setgrids$State_Id[which(db$dep_com%in%setgrids$dep_com)])
# db$id_grid<- ifelse(is.na(db$dep_com%in%setgrids$dep_com),NA,setgrids$id_grid[which(db$dep_com%in%setgrids$dep_com)])
db <- distinct(db,com_loc, .keep_all= TRUE)
db <- db %>% filter(!is.na(com_loc))
db$dep_com.x
db$dep_com.y
db$dep_com.y == db$dep_com.x
sum(is.na(db$dep_com.x))
sum(is.na(db$dep_com.y))
source('C:/Users/Admin/Desktop/Hedi/github/3F/R/REACH_3F_Calcul_Aggregation.R')
final_hex<-aggregation_fct_xml_hex(db,setgrids,hex,c("State_Id","id_grid"))
debugonce(aggregation_fct_xml_hex)
final_hex<-aggregation_fct_xml_hex(db,setgrids,hex,c("State_Id","id_grid"))
db <-left_join(db,setgrids, by = "com_loc")
# db$State_Id<- ifelse(is.na(db$dep_com%in%setgrids$dep_com),NA,setgrids$State_Id[which(db$dep_com%in%setgrids$dep_com)])
# db$id_grid<- ifelse(is.na(db$dep_com%in%setgrids$dep_com),NA,setgrids$id_grid[which(db$dep_com%in%setgrids$dep_com)])
db <- distinct(db,com_loc, .keep_all= TRUE)
db <- db %>% filter(!is.na(com_loc))
grid_summary <- db %>% group_by(State_Id) %>%
summarise(settlement_assessed_num = length(dep_com.x), ki_num= sum(B_ki_coverage))
setgrids$State_Id
rm(list = ls())
source("R/REACH_3F_Calcul_Aggregation.R")
db<-read_excel("data/mars2021/REG_1903B_Aggregated_Data_ 3F_2021-03_xml_VF.xlsx") %>% type_convert()
LocaliteGPK <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\Localites\\Localites_3F.gpkg"
LocaliteLayer <- "Localites_3F"
hexagoneSHP <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\HEX\\hexagon2.shp"
hexgrid <- readOGR(hexagoneSHP)
settlements_hex <- readOGR(LocaliteGPK, layer = LocaliteLayer)
hexgrid@data <- mutate(hexgrid@data, id_grid = as.numeric(rownames(hexgrid@data)))
settlements_hex@data <- mutate(settlements_hex@data, id_sett = as.numeric(rownames(settlements_hex@data)))
setgrids <- over(settlements_hex, hexgrid)
setgrids <- mutate(setgrids, id_sett = as.numeric(rownames(setgrids)))
setgrids <- left_join(settlements_hex@data, setgrids, by = c("id_sett" = "id_sett"))
setgrids$com_loc<-clean_pcode(setgrids$com_loc)
setgrids$dep_com<-clean_pcode(setgrids$dep_com)
db$dep_com <- clean_pcode(paste(db$admin2,db$admin3, sep = "_"))
db$com_loc <- clean_pcode(paste(db$admin3,db$info_localite_final, sep = "_"))
hex <- c("State_Id","id_grid",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
final_hex<-aggregation_fct_xml_hex(db,setgrids,hex,c("State_Id","id_grid"))
write_xlsx(
final_hex,
paste0("output/mars2021/Hex_Agg_REG_1903B_3F_data_compilation-",humanTime(),".xlsx"))
library(dplyr)
library(tibble)
library(readxl)
library(sf)
library(rgdal)
library(readr)
library(writexl)
source("R/REACH_3F_Calcul_Aggregation.R")
db<-read_excel("data/avril2021/Agg_REG_1903B_3F-20210507-172629.xlsx") %>% type_convert()
LocaliteGPK <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\Localites\\Localites_3F.gpkg"
LocaliteLayer <- "Localites_3F"
hexagoneSHP <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\HEX\\hexagon2.shp"
hexgrid <- readOGR(hexagoneSHP)
settlements<-st_read(LocaliteGPK, layer = LocaliteLayer) %>% as.data.frame()
settlements_hex <- readOGR(LocaliteGPK, layer = LocaliteLayer)
hexgrid@data <- mutate(hexgrid@data, id_grid = as.numeric(rownames(hexgrid@data)))
settlements_hex@data <- mutate(settlements_hex@data, id_sett = as.numeric(rownames(settlements_hex@data)))
setgrids <- over(settlements_hex, hexgrid)
setgrids <- mutate(setgrids, id_sett = as.numeric(rownames(setgrids)))
setgrids <- left_join(settlements_hex@data, setgrids, by = c("id_sett" = "id_sett"))
setgrids$com_loc<-clean_pcode(setgrids$com_loc)
setgrids$dep_com<-clean_pcode(setgrids$dep_com)
db$pay_reg <- clean_pcode(paste(db$info_pays,db$admin1, sep = "_"))
db$reg_dep <- clean_pcode(paste(db$admin1,db$admin2, sep = "_"))
db$dep_com <- clean_pcode(paste(db$admin2,db$admin3, sep = "_"))
db$com_loc <- clean_pcode(paste(db$admin3,db$info_localite_final, sep = "_"))
settlement_dep_num<-settlements %>% count(clean_pcode(reg_dep)) %>% rename("reg_dep"="clean_pcode(reg_dep)")
settlement_com_num <- settlements %>% count(clean_pcode(dep_com)) %>% rename("dep_com"="clean_pcode(dep_com)")
pay_reg <- c("pay_reg",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
reg_dep <- c("reg_dep",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
dep_com <- c("dep_com",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
hex <- c("State_Id","id_grid",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
final_pay_reg<-aggregation_fct(db,pay_reg,"pay_reg")
final_reg_dep<-aggregation_fct(db,reg_dep,"reg_dep")
final_dep_com<-aggregation_fct(db,dep_com,"dep_com")
final_hex<-aggregation_fct_hex(db,setgrids,hex,c("State_Id","id_grid"))
final_pay_reg<-aggregation_fct_xml(db,pay_reg,"pay_reg")
final_reg_dep<-aggregation_fct_xml(db,reg_dep,"reg_dep")
final_dep_com<-aggregation_fct_xml(db,dep_com,"dep_com")
final_hex<-aggregation_fct_xml_hex(db,setgrids,hex,c("State_Id","id_grid"))
final_reg_dep<-left_join(final_reg_dep,settlement_dep_num,"reg_dep")
rm(list = ls())
source("R/REACH_3F_Calcul_Aggregation.R")
db<-read_excel("data/avril2021/Agg_REG_1903B_3F-20210507-172629.xlsx") %>% type_convert()
LocaliteGPK <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\Localites\\Localites_3F.gpkg"
LocaliteLayer <- "Localites_3F"
hexagoneSHP <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\HEX\\hexagon2.shp"
hexgrid <- readOGR(hexagoneSHP)
settlements<-st_read(LocaliteGPK, layer = LocaliteLayer) %>% as.data.frame()
settlements_hex <- readOGR(LocaliteGPK, layer = LocaliteLayer)
hexgrid@data <- mutate(hexgrid@data, id_grid = as.numeric(rownames(hexgrid@data)))
settlements_hex@data <- mutate(settlements_hex@data, id_sett = as.numeric(rownames(settlements_hex@data)))
setgrids <- over(settlements_hex, hexgrid)
setgrids <- mutate(setgrids, id_sett = as.numeric(rownames(setgrids)))
setgrids <- left_join(settlements_hex@data, setgrids, by = c("id_sett" = "id_sett"))
setgrids$com_loc<-clean_pcode(setgrids$com_loc)
setgrids$dep_com<-clean_pcode(setgrids$dep_com)
db$pay_reg <- clean_pcode(paste(db$info_pays,db$admin1, sep = "_"))
db$reg_dep <- clean_pcode(paste(db$admin1,db$admin2, sep = "_"))
db$dep_com <- clean_pcode(paste(db$admin2,db$admin3, sep = "_"))
db$com_loc <- clean_pcode(paste(db$admin3,db$info_localite_final, sep = "_"))
settlement_dep_num<-settlements %>% count(clean_pcode(reg_dep)) %>% rename("reg_dep"="clean_pcode(reg_dep)")
settlement_com_num <- settlements %>% count(clean_pcode(dep_com)) %>% rename("dep_com"="clean_pcode(dep_com)")
pay_reg <- c("pay_reg",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
reg_dep <- c("reg_dep",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
dep_com <- c("dep_com",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
hex <- c("State_Id","id_grid",
"pdi_temps_arrivee", "refugies_temps_arrivee",
"nourriture_maintenant",  "moyens_existence_obstacle", "marche_maintenant", "prot_maintenant", "sante_maintenant",
"edu_maintenant",  "info_difficulte", "eau_debit", "pdi_abris_adequat","abris_dommages", "nutri",
"procuration_savon", "reseau_mobile")
final_pay_reg<-aggregation_fct_xml(db,pay_reg,"pay_reg")
final_reg_dep<-aggregation_fct_xml(db,reg_dep,"reg_dep")
final_dep_com<-aggregation_fct_xml(db,dep_com,"dep_com")
final_hex<-aggregation_fct_xml_hex(db,setgrids,hex,c("State_Id","id_grid"))
final_reg_dep<-left_join(final_reg_dep,settlement_dep_num,"reg_dep")
final_reg_dep$dep_percentage <-final_reg_dep$settlement_assessed_num/final_reg_dep$n
final_dep_com<-left_join(final_dep_com,settlement_com_num,"dep_com")
final_dep_com$dep_percentage <-final_dep_com$settlement_assessed_num/final_dep_com$n
write_xlsx(
final_pay_reg,
paste0("output/mars2021/Reg_Agg_REG_1903B_3F_data_compilation-",humanTime(),".xlsx"))
write_xlsx(
final_pay_reg,
paste0("output/avril2021/Reg_Agg_REG_1903B_3F_data_compilation-",humanTime(),".xlsx"))
write_xlsx(
final_reg_dep,
paste0("output/avril2021/Dep_Agg_REG_1903B_3F_data_compilation-",humanTime(),".xlsx"))
write_xlsx(
final_dep_com,
paste0("output/avril2021/Com_Agg_REG_1903B_3F_data_compilation-",humanTime(),".xlsx"))
write_xlsx(
final_hex,
paste0("output/avril2021/Hex_Agg_REG_1903B_3F_data_compilation-",humanTime(),".xlsx"))
1/0
65555/0
555/NA
0/5454
#--------------------------------------------------------------
#
# compare settlement from csv and gpkg
#
# Bruno Granger 05/2020 for impact Niger
#
#--------------------------------------------------------------
#install.packages("fuzzyjoin")
library(fuzzyjoin)
library(rgdal) # used to load the shapefiles
library(dplyr) # because I wouldn't leave home without it
library(tibble)
library(sf)
LocaliteGPK <- "Z:\\1_REACH_NIGER\\02_Project_Management\\2021\\2021_3Frontieres\\10_GIS\\GIS_Data\\Localites\\Localites_3F.gpkg"
LocaliteLayer <- "Localites_3F"
settlements <- st_read(LocaliteGPK, layer = LocaliteLayer)
data<-readxl::read_excel("data/avril2021/Agg_REG_1903B_3F-20210507-172629.xlsx")
data$dep_com_loc
settlements$dep_com_loc
source('C:/Users/Admin/Desktop/Hedi/github/3F/R/REACH_3F_Calcul_Aggregation.R')
settlements$dep_com_loc <-clean_pcode(settlements$dep_com_loc)
Jointure <- data[data$dep_com_loc %in%settlements$dep_com_loc ,]
NonJointure <- data[!data$dep_com_loc %in% settlements$dep_com_loc ,]
writexl::write_xlsx(Jointure,"data/avril2021/Yes_set_Agg_REG_1903B_3F.xlsx")
writexl::write_xlsx(NonJointure,"data/avril2021/No_set_Agg_REG_1903B_3F.xlsx")
source("R/REACH_3F_Calcul_Aggregation.R")
writexl::write_xlsx(Jointure,"output/avril2021/Yes_set_Agg_REG_1903B_3F.xlsx")
writexl::write_xlsx(NonJointure,"output/avril2021/No_set_Agg_REG_1903B_3F.xlsx")
